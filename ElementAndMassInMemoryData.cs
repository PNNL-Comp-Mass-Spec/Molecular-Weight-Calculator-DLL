using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MolecularWeightCalculator
{
    internal class ElementAndMassInMemoryData
    {
        /// <summary>
        /// Define the caution statements
        /// </summary>
        /// <remarks>Use objMwtWin.ClearCautionStatements and objMwtWin.AddCautionStatement to set these based on language</remarks>
        public static int MemoryLoadCautionStatementsEnglish(ref string[,] cautionStatements)
        {
            const int statementCount = 41;
            cautionStatements[1, 0] = "Bi";
            cautionStatements[1, 1] = "Bi means bismuth; BI means boron-iodine.  ";
            cautionStatements[2, 0] = "Bk";
            cautionStatements[2, 1] = "Bk means berkelium; BK means boron-potassium.  ";
            cautionStatements[3, 0] = "Bu";
            cautionStatements[3, 1] = "Bu means the butyl group; BU means boron-uranium.  ";
            cautionStatements[4, 0] = "Cd";
            cautionStatements[4, 1] = "Cd means cadmium; CD means carbon-deuterium.  ";
            cautionStatements[5, 0] = "Cf";
            cautionStatements[5, 1] = "Cf means californium; CF means carbon-fluorine.  ";
            cautionStatements[6, 0] = "Co";
            cautionStatements[6, 1] = "Co means cobalt; CO means carbon-oxygen.  ";
            cautionStatements[7, 0] = "Cs";
            cautionStatements[7, 1] = "Cs means cesium; CS means carbon-sulfur.  ";
            cautionStatements[8, 0] = "Cu";
            cautionStatements[8, 1] = "Cu means copper; CU means carbon-uranium.  ";
            cautionStatements[9, 0] = "Dy";
            cautionStatements[9, 1] = "Dy means dysprosium; DY means deuterium-yttrium.  ";
            cautionStatements[10, 0] = "Hf";
            cautionStatements[10, 1] = "Hf means hafnium; HF means hydrogen-fluorine.  ";
            cautionStatements[11, 0] = "Ho";
            cautionStatements[11, 1] = "Ho means holmium; HO means hydrogen-oxygen.  ";
            cautionStatements[12, 0] = "In";
            cautionStatements[12, 1] = "In means indium; IN means iodine-nitrogen.  ";
            cautionStatements[13, 0] = "Nb";
            cautionStatements[13, 1] = "Nb means niobium; NB means nitrogen-boron.  ";
            cautionStatements[14, 0] = "Nd";
            cautionStatements[14, 1] = "Nd means neodymium; ND means nitrogen-deuterium.  ";
            cautionStatements[15, 0] = "Ni";
            cautionStatements[15, 1] = "Ni means nickel; NI means nitrogen-iodine.  ";
            cautionStatements[16, 0] = "No";
            cautionStatements[16, 1] = "No means nobelium; NO means nitrogen-oxygen.  ";
            cautionStatements[17, 0] = "Np";
            cautionStatements[17, 1] = "Np means neptunium; NP means nitrogen-phosphorus.  ";
            cautionStatements[18, 0] = "Os";
            cautionStatements[18, 1] = "Os means osmium; OS means oxygen-sulfur.  ";
            cautionStatements[19, 0] = "Pd";
            cautionStatements[19, 1] = "Pd means palladium; PD means phosphorus-deuterium.  ";
            cautionStatements[20, 0] = "Ph";
            cautionStatements[20, 1] = "Ph means phenyl, PH means phosphorus-hydrogen.  ";
            cautionStatements[21, 0] = "Pu";
            cautionStatements[21, 1] = "Pu means plutonium; PU means phosphorus-uranium.  ";
            cautionStatements[22, 0] = "Py";
            cautionStatements[22, 1] = "Py means pyridine; PY means phosphorus-yttrium.  ";
            cautionStatements[23, 0] = "Sb";
            cautionStatements[23, 1] = "Sb means antimony; SB means sulfur-boron.  ";
            cautionStatements[24, 0] = "Sc";
            cautionStatements[24, 1] = "Sc means scandium; SC means sulfur-carbon.  ";
            cautionStatements[25, 0] = "Si";
            cautionStatements[25, 1] = "Si means silicon; SI means sulfur-iodine.  ";
            cautionStatements[26, 0] = "Sn";
            cautionStatements[26, 1] = "Sn means tin; SN means sulfur-nitrogen.  ";
            cautionStatements[27, 0] = "TI";
            cautionStatements[27, 1] = "TI means tritium-iodine, Ti means titanium.  ";
            cautionStatements[28, 0] = "Yb";
            cautionStatements[28, 1] = "Yb means ytterbium; YB means yttrium-boron.  ";
            cautionStatements[29, 0] = "BPY";
            cautionStatements[29, 1] = "BPY means boron-phosphorus-yttrium; Bpy means bipyridine.  ";
            cautionStatements[30, 0] = "BPy";
            cautionStatements[30, 1] = "BPy means boron-pyridine; Bpy means bipyridine.  ";
            cautionStatements[31, 0] = "Bpy";
            cautionStatements[31, 1] = "Bpy means bipyridine.  ";
            cautionStatements[32, 0] = "Cys";
            cautionStatements[32, 1] = "Cys means cysteine; CYS means carbon-yttrium-sulfur.  ";
            cautionStatements[33, 0] = "His";
            cautionStatements[33, 1] = "His means histidine; HIS means hydrogen-iodine-sulfur.  ";
            cautionStatements[34, 0] = "Hoh";
            cautionStatements[34, 1] = "HoH means holmium-hydrogen; HOH means hydrogen-oxygen-hydrogen (aka water).  ";
            cautionStatements[35, 0] = "Hyp";
            cautionStatements[35, 1] = "Hyp means hydroxyproline; HYP means hydrogen-yttrium-phosphorus.  ";
            cautionStatements[36, 0] = "OAc";
            cautionStatements[36, 1] = "OAc means oxygen-actinium; Oac means acetate.  ";
            cautionStatements[37, 0] = "Oac";
            cautionStatements[37, 1] = "Oac means acetate.  ";
            cautionStatements[38, 0] = "Pro";
            cautionStatements[38, 1] = "Pro means proline; PrO means praseodymium-oxygen.  ";
            cautionStatements[39, 0] = "PrO";
            cautionStatements[39, 1] = "Pro means proline; PrO means praseodymium-oxygen.  ";
            cautionStatements[40, 0] = "Val";
            cautionStatements[40, 1] = "Val means valine; VAl means vanadium-aluminum.  ";
            cautionStatements[41, 0] = "VAl";
            cautionStatements[41, 1] = "Val means valine; VAl means vanadium-aluminum.  ";

            return statementCount;
        }

        /// <summary>
        /// Loads the element data into the out parameters.
        /// </summary>
        /// <param name="eElementMode"></param>
        /// <param name="strElementNames"></param>
        /// <param name="dblElemVals"></param>
        public static void MemoryLoadElements(
            ElementAndMassTools.emElementModeConstants eElementMode,
            out string[] strElementNames,
            out double[,] dblElemVals)
        {
            // This array stores the element names
            strElementNames = new string[104];

            // dblElemVals[intElementIndex,1] stores the element's weight
            // dblElemVals[intElementIndex,2] stores the element's uncertainty
            // dblElemVals[intElementIndex,3] stores the element's charge
            // Note: I could make this array of type udtElementStatsType, but the size of this sub would increase dramatically
            dblElemVals = new double[104, 4];

            // Data Load Statements
            // Uncertainties from CRC Handbook of Chemistry and Physics
            // For Radioactive elements, the most stable isotope is NOT used;
            // instead, an average Mol. Weight is used, just like with other elements.
            // Data obtained from the Perma-Chart Science Series periodic table, 1993.
            // Uncertainties from CRC Handbook of Chemistry and Physics, except for
            // Radioactive elements, where uncertainty was estimated to be .n5 where
            // intSpecificElementProperty represents the number digits after the decimal point but before the last
            // number of the molecular weight.
            // For example, for No, MW = 259.1009 (±0.0005)

            // Assigning element names,        Charges
            strElementNames[1] = "H";
            dblElemVals[1, 3] = 1d;
            strElementNames[2] = "He";
            dblElemVals[2, 3] = 0d;
            strElementNames[3] = "Li";
            dblElemVals[3, 3] = 1d;
            strElementNames[4] = "Be";
            dblElemVals[4, 3] = 2d;
            strElementNames[5] = "B";
            dblElemVals[5, 3] = 3d;
            strElementNames[6] = "C";
            dblElemVals[6, 3] = 4d;
            strElementNames[7] = "N";
            dblElemVals[7, 3] = -3;
            strElementNames[8] = "O";
            dblElemVals[8, 3] = -2;
            strElementNames[9] = "F";
            dblElemVals[9, 3] = -1;
            strElementNames[10] = "Ne";
            dblElemVals[10, 3] = 0d;
            strElementNames[11] = "Na";
            dblElemVals[11, 3] = 1d;
            strElementNames[12] = "Mg";
            dblElemVals[12, 3] = 2d;
            strElementNames[13] = "Al";
            dblElemVals[13, 3] = 3d;
            strElementNames[14] = "Si";
            dblElemVals[14, 3] = 4d;
            strElementNames[15] = "P";
            dblElemVals[15, 3] = -3;
            strElementNames[16] = "S";
            dblElemVals[16, 3] = -2;
            strElementNames[17] = "Cl";
            dblElemVals[17, 3] = -1;
            strElementNames[18] = "Ar";
            dblElemVals[18, 3] = 0d;
            strElementNames[19] = "K";
            dblElemVals[19, 3] = 1d;
            strElementNames[20] = "Ca";
            dblElemVals[20, 3] = 2d;
            strElementNames[21] = "Sc";
            dblElemVals[21, 3] = 3d;
            strElementNames[22] = "Ti";
            dblElemVals[22, 3] = 4d;
            strElementNames[23] = "V";
            dblElemVals[23, 3] = 5d;
            strElementNames[24] = "Cr";
            dblElemVals[24, 3] = 3d;
            strElementNames[25] = "Mn";
            dblElemVals[25, 3] = 2d;
            strElementNames[26] = "Fe";
            dblElemVals[26, 3] = 3d;
            strElementNames[27] = "Co";
            dblElemVals[27, 3] = 2d;
            strElementNames[28] = "Ni";
            dblElemVals[28, 3] = 2d;
            strElementNames[29] = "Cu";
            dblElemVals[29, 3] = 2d;
            strElementNames[30] = "Zn";
            dblElemVals[30, 3] = 2d;
            strElementNames[31] = "Ga";
            dblElemVals[31, 3] = 3d;
            strElementNames[32] = "Ge";
            dblElemVals[32, 3] = 4d;
            strElementNames[33] = "As";
            dblElemVals[33, 3] = -3;
            strElementNames[34] = "Se";
            dblElemVals[34, 3] = -2;
            strElementNames[35] = "Br";
            dblElemVals[35, 3] = -1;
            strElementNames[36] = "Kr";
            dblElemVals[36, 3] = 0d;
            strElementNames[37] = "Rb";
            dblElemVals[37, 3] = 1d;
            strElementNames[38] = "Sr";
            dblElemVals[38, 3] = 2d;
            strElementNames[39] = "Y";
            dblElemVals[39, 3] = 3d;
            strElementNames[40] = "Zr";
            dblElemVals[40, 3] = 4d;
            strElementNames[41] = "Nb";
            dblElemVals[41, 3] = 5d;
            strElementNames[42] = "Mo";
            dblElemVals[42, 3] = 6d;
            strElementNames[43] = "Tc";
            dblElemVals[43, 3] = 7d;
            strElementNames[44] = "Ru";
            dblElemVals[44, 3] = 4d;
            strElementNames[45] = "Rh";
            dblElemVals[45, 3] = 3d;
            strElementNames[46] = "Pd";
            dblElemVals[46, 3] = 2d;
            strElementNames[47] = "Ag";
            dblElemVals[47, 3] = 1d;
            strElementNames[48] = "Cd";
            dblElemVals[48, 3] = 2d;
            strElementNames[49] = "In";
            dblElemVals[49, 3] = 3d;
            strElementNames[50] = "Sn";
            dblElemVals[50, 3] = 4d;
            strElementNames[51] = "Sb";
            dblElemVals[51, 3] = -3;
            strElementNames[52] = "Te";
            dblElemVals[52, 3] = -2;
            strElementNames[53] = "I";
            dblElemVals[53, 3] = -1;
            strElementNames[54] = "Xe";
            dblElemVals[54, 3] = 0d;
            strElementNames[55] = "Cs";
            dblElemVals[55, 3] = 1d;
            strElementNames[56] = "Ba";
            dblElemVals[56, 3] = 2d;
            strElementNames[57] = "La";
            dblElemVals[57, 3] = 3d;
            strElementNames[58] = "Ce";
            dblElemVals[58, 3] = 3d;
            strElementNames[59] = "Pr";
            dblElemVals[59, 3] = 4d;
            strElementNames[60] = "Nd";
            dblElemVals[60, 3] = 3d;
            strElementNames[61] = "Pm";
            dblElemVals[61, 3] = 3d;
            strElementNames[62] = "Sm";
            dblElemVals[62, 3] = 3d;
            strElementNames[63] = "Eu";
            dblElemVals[63, 3] = 3d;
            strElementNames[64] = "Gd";
            dblElemVals[64, 3] = 3d;
            strElementNames[65] = "Tb";
            dblElemVals[65, 3] = 3d;
            strElementNames[66] = "Dy";
            dblElemVals[66, 3] = 3d;
            strElementNames[67] = "Ho";
            dblElemVals[67, 3] = 3d;
            strElementNames[68] = "Er";
            dblElemVals[68, 3] = 3d;
            strElementNames[69] = "Tm";
            dblElemVals[69, 3] = 3d;
            strElementNames[70] = "Yb";
            dblElemVals[70, 3] = 3d;
            strElementNames[71] = "Lu";
            dblElemVals[71, 3] = 3d;
            strElementNames[72] = "Hf";
            dblElemVals[72, 3] = 4d;
            strElementNames[73] = "Ta";
            dblElemVals[73, 3] = 5d;
            strElementNames[74] = "W";
            dblElemVals[74, 3] = 6d;
            strElementNames[75] = "Re";
            dblElemVals[75, 3] = 7d;
            strElementNames[76] = "Os";
            dblElemVals[76, 3] = 4d;
            strElementNames[77] = "Ir";
            dblElemVals[77, 3] = 4d;
            strElementNames[78] = "Pt";
            dblElemVals[78, 3] = 4d;
            strElementNames[79] = "Au";
            dblElemVals[79, 3] = 3d;
            strElementNames[80] = "Hg";
            dblElemVals[80, 3] = 2d;
            strElementNames[81] = "Tl";
            dblElemVals[81, 3] = 1d;
            strElementNames[82] = "Pb";
            dblElemVals[82, 3] = 2d;
            strElementNames[83] = "Bi";
            dblElemVals[83, 3] = 3d;
            strElementNames[84] = "Po";
            dblElemVals[84, 3] = 4d;
            strElementNames[85] = "At";
            dblElemVals[85, 3] = -1;
            strElementNames[86] = "Rn";
            dblElemVals[86, 3] = 0d;
            strElementNames[87] = "Fr";
            dblElemVals[87, 3] = 1d;
            strElementNames[88] = "Ra";
            dblElemVals[88, 3] = 2d;
            strElementNames[89] = "Ac";
            dblElemVals[89, 3] = 3d;
            strElementNames[90] = "Th";
            dblElemVals[90, 3] = 4d;
            strElementNames[91] = "Pa";
            dblElemVals[91, 3] = 5d;
            strElementNames[92] = "U";
            dblElemVals[92, 3] = 6d;
            strElementNames[93] = "Np";
            dblElemVals[93, 3] = 5d;
            strElementNames[94] = "Pu";
            dblElemVals[94, 3] = 4d;
            strElementNames[95] = "Am";
            dblElemVals[95, 3] = 3d;
            strElementNames[96] = "Cm";
            dblElemVals[96, 3] = 3d;
            strElementNames[97] = "Bk";
            dblElemVals[97, 3] = 3d;
            strElementNames[98] = "Cf";
            dblElemVals[98, 3] = 3d;
            strElementNames[99] = "Es";
            dblElemVals[99, 3] = 3d;
            strElementNames[100] = "Fm";
            dblElemVals[100, 3] = 3d;
            strElementNames[101] = "Md";
            dblElemVals[101, 3] = 3d;
            strElementNames[102] = "No";
            dblElemVals[102, 3] = 3d;
            strElementNames[103] = "Lr";
            dblElemVals[103, 3] = 3d;

            // Set uncertainty to 0 for all elements if using exact isotopic or integer isotopic weights
            if (eElementMode == ElementAndMassTools.emElementModeConstants.emIsotopicMass || eElementMode == ElementAndMassTools.emElementModeConstants.emIntegerMass)
            {
                for (var intIndex = 1; intIndex <= ElementAndMassTools.ELEMENT_COUNT; intIndex++)
                    dblElemVals[intIndex, 2] = 0d;
            }

            switch (eElementMode)
            {
                case ElementAndMassTools.emElementModeConstants.emIntegerMass:
                    // Integer Isotopic Weights
                    dblElemVals[1, 1] = 1d;
                    dblElemVals[2, 1] = 4d;
                    dblElemVals[3, 1] = 7d;
                    dblElemVals[4, 1] = 9d;
                    dblElemVals[5, 1] = 11d;
                    dblElemVals[6, 1] = 12d;
                    dblElemVals[7, 1] = 14d;
                    dblElemVals[8, 1] = 16d;
                    dblElemVals[9, 1] = 19d;
                    dblElemVals[10, 1] = 20d;
                    dblElemVals[11, 1] = 23d;
                    dblElemVals[12, 1] = 24d;
                    dblElemVals[13, 1] = 27d;
                    dblElemVals[14, 1] = 28d;
                    dblElemVals[15, 1] = 31d;
                    dblElemVals[16, 1] = 32d;
                    dblElemVals[17, 1] = 35d;
                    dblElemVals[18, 1] = 40d;
                    dblElemVals[19, 1] = 39d;
                    dblElemVals[20, 1] = 40d;
                    dblElemVals[21, 1] = 45d;
                    dblElemVals[22, 1] = 48d;
                    dblElemVals[23, 1] = 51d;
                    dblElemVals[24, 1] = 52d;
                    dblElemVals[25, 1] = 55d;
                    dblElemVals[26, 1] = 56d;
                    dblElemVals[27, 1] = 59d;
                    dblElemVals[28, 1] = 58d;
                    dblElemVals[29, 1] = 63d;
                    dblElemVals[30, 1] = 64d;
                    dblElemVals[31, 1] = 69d;
                    dblElemVals[32, 1] = 72d;
                    dblElemVals[33, 1] = 75d;
                    dblElemVals[34, 1] = 80d;
                    dblElemVals[35, 1] = 79d;
                    dblElemVals[36, 1] = 84d;
                    dblElemVals[37, 1] = 85d;
                    dblElemVals[38, 1] = 88d;
                    dblElemVals[39, 1] = 89d;
                    dblElemVals[40, 1] = 90d;
                    dblElemVals[41, 1] = 93d;
                    dblElemVals[42, 1] = 98d;
                    dblElemVals[43, 1] = 98d;
                    dblElemVals[44, 1] = 102d;
                    dblElemVals[45, 1] = 103d;
                    dblElemVals[46, 1] = 106d;
                    dblElemVals[47, 1] = 107d;
                    dblElemVals[48, 1] = 114d;
                    dblElemVals[49, 1] = 115d;
                    dblElemVals[50, 1] = 120d;
                    dblElemVals[51, 1] = 121d;
                    dblElemVals[52, 1] = 130d;
                    dblElemVals[53, 1] = 127d;
                    dblElemVals[54, 1] = 132d;
                    dblElemVals[55, 1] = 133d;
                    dblElemVals[56, 1] = 138d;
                    dblElemVals[57, 1] = 139d;
                    dblElemVals[58, 1] = 140d;
                    dblElemVals[59, 1] = 141d;
                    dblElemVals[60, 1] = 142d;
                    dblElemVals[61, 1] = 145d;
                    dblElemVals[62, 1] = 152d;
                    dblElemVals[63, 1] = 153d;
                    dblElemVals[64, 1] = 158d;
                    dblElemVals[65, 1] = 159d;
                    dblElemVals[66, 1] = 164d;
                    dblElemVals[67, 1] = 165d;
                    dblElemVals[68, 1] = 166d;
                    dblElemVals[69, 1] = 169d;
                    dblElemVals[70, 1] = 174d;
                    dblElemVals[71, 1] = 175d;
                    dblElemVals[72, 1] = 180d;
                    dblElemVals[73, 1] = 181d;
                    dblElemVals[74, 1] = 184d;
                    dblElemVals[75, 1] = 187d;
                    dblElemVals[76, 1] = 192d;
                    dblElemVals[77, 1] = 193d;
                    dblElemVals[78, 1] = 195d;
                    dblElemVals[79, 1] = 197d;
                    dblElemVals[80, 1] = 202d;
                    dblElemVals[81, 1] = 205d;
                    dblElemVals[82, 1] = 208d;
                    dblElemVals[83, 1] = 209d;
                    dblElemVals[84, 1] = 209d;
                    dblElemVals[85, 1] = 210d;
                    dblElemVals[86, 1] = 222d;
                    dblElemVals[87, 1] = 223d;
                    dblElemVals[88, 1] = 227d;
                    dblElemVals[89, 1] = 227d;
                    dblElemVals[90, 1] = 232d;
                    dblElemVals[91, 1] = 231d;
                    dblElemVals[92, 1] = 238d;
                    dblElemVals[93, 1] = 237d;
                    dblElemVals[94, 1] = 244d;
                    dblElemVals[95, 1] = 243d;
                    dblElemVals[96, 1] = 247d;
                    dblElemVals[97, 1] = 247d;
                    dblElemVals[98, 1] = 251d;
                    dblElemVals[99, 1] = 252d;
                    dblElemVals[100, 1] = 257d;
                    dblElemVals[101, 1] = 258d;
                    dblElemVals[102, 1] = 269d;
                    dblElemVals[103, 1] = 260d;

                    // Unused elements
                    // data 104,Unq,Unnilquadium,261.11,.05, 105,Unp,Unnilpentium,262.114,005, 106,Unh,Unnilhexium,263.118,.005, 107,Uns,Unnilseptium,262.12,.05
                    break;

                case ElementAndMassTools.emElementModeConstants.emIsotopicMass:
                    // isotopic Element Weights
                    dblElemVals[1, 1] = 1.0078246d;
                    dblElemVals[2, 1] = 4.0026029d;
                    dblElemVals[3, 1] = 7.016005d;
                    dblElemVals[4, 1] = 9.012183d;
                    dblElemVals[5, 1] = 11.009305d;
                    dblElemVals[6, 1] = 12d;
                    dblElemVals[7, 1] = 14.003074d;
                    dblElemVals[8, 1] = 15.994915d;
                    dblElemVals[9, 1] = 18.9984032d;
                    dblElemVals[10, 1] = 19.992439d;
                    dblElemVals[11, 1] = 22.98977d;
                    dblElemVals[12, 1] = 23.98505d;
                    dblElemVals[13, 1] = 26.981541d;
                    dblElemVals[14, 1] = 27.976928d;
                    dblElemVals[15, 1] = 30.973763d;
                    dblElemVals[16, 1] = 31.972072d;
                    dblElemVals[17, 1] = 34.968853d;
                    dblElemVals[18, 1] = 39.962383d;
                    dblElemVals[19, 1] = 38.963708d;
                    dblElemVals[20, 1] = 39.962591d;
                    dblElemVals[21, 1] = 44.955914d;
                    dblElemVals[22, 1] = 47.947947d;
                    dblElemVals[23, 1] = 50.943963d;
                    dblElemVals[24, 1] = 51.94051d;
                    dblElemVals[25, 1] = 54.938046d;
                    dblElemVals[26, 1] = 55.934939d;
                    dblElemVals[27, 1] = 58.933198d;
                    dblElemVals[28, 1] = 57.935347d;
                    dblElemVals[29, 1] = 62.929599d;
                    dblElemVals[30, 1] = 63.929145d;
                    dblElemVals[31, 1] = 68.925581d;
                    dblElemVals[32, 1] = 71.92208d;
                    dblElemVals[33, 1] = 74.921596d;
                    dblElemVals[34, 1] = 79.916521d;
                    dblElemVals[35, 1] = 78.918336d;
                    dblElemVals[36, 1] = 83.911506d;
                    dblElemVals[37, 1] = 84.9118d;
                    dblElemVals[38, 1] = 87.905625d;
                    dblElemVals[39, 1] = 88.905856d;
                    dblElemVals[40, 1] = 89.904708d;
                    dblElemVals[41, 1] = 92.906378d;
                    dblElemVals[42, 1] = 97.905405d;
                    dblElemVals[43, 1] = 98d;
                    dblElemVals[44, 1] = 101.90434d;
                    dblElemVals[45, 1] = 102.905503d;
                    dblElemVals[46, 1] = 105.903475d;
                    dblElemVals[47, 1] = 106.905095d;
                    dblElemVals[48, 1] = 113.903361d;
                    dblElemVals[49, 1] = 114.903875d;
                    dblElemVals[50, 1] = 119.902199d;
                    dblElemVals[51, 1] = 120.903824d;
                    dblElemVals[52, 1] = 129.906229d;
                    dblElemVals[53, 1] = 126.904477d;
                    dblElemVals[54, 1] = 131.904148d;
                    dblElemVals[55, 1] = 132.905433d;
                    dblElemVals[56, 1] = 137.905236d;
                    dblElemVals[57, 1] = 138.906355d;
                    dblElemVals[58, 1] = 139.905442d;
                    dblElemVals[59, 1] = 140.907657d;
                    dblElemVals[60, 1] = 141.907731d;
                    dblElemVals[61, 1] = 145d;
                    dblElemVals[62, 1] = 151.919741d;
                    dblElemVals[63, 1] = 152.921243d;
                    dblElemVals[64, 1] = 157.924111d;
                    dblElemVals[65, 1] = 158.92535d;
                    dblElemVals[66, 1] = 163.929183d;
                    dblElemVals[67, 1] = 164.930332d;
                    dblElemVals[68, 1] = 165.930305d;
                    dblElemVals[69, 1] = 168.934225d;
                    dblElemVals[70, 1] = 173.938873d;
                    dblElemVals[71, 1] = 174.940785d;
                    dblElemVals[72, 1] = 179.946561d;
                    dblElemVals[73, 1] = 180.948014d;
                    dblElemVals[74, 1] = 183.950953d;
                    dblElemVals[75, 1] = 186.955765d;
                    dblElemVals[76, 1] = 191.960603d;
                    dblElemVals[77, 1] = 192.962942d;
                    dblElemVals[78, 1] = 194.964785d;
                    dblElemVals[79, 1] = 196.96656d;
                    dblElemVals[80, 1] = 201.970632d;
                    dblElemVals[81, 1] = 204.97441d;
                    dblElemVals[82, 1] = 207.976641d;
                    dblElemVals[83, 1] = 208.980388d;
                    dblElemVals[84, 1] = 209d;
                    dblElemVals[85, 1] = 210d;
                    dblElemVals[86, 1] = 222d;
                    dblElemVals[87, 1] = 223d;
                    dblElemVals[88, 1] = 227d;
                    dblElemVals[89, 1] = 227d;
                    dblElemVals[90, 1] = 232.038054d;
                    dblElemVals[91, 1] = 231d;
                    dblElemVals[92, 1] = 238.050786d;
                    dblElemVals[93, 1] = 237d;
                    dblElemVals[94, 1] = 244d;
                    dblElemVals[95, 1] = 243d;
                    dblElemVals[96, 1] = 247d;
                    dblElemVals[97, 1] = 247d;
                    dblElemVals[98, 1] = 251d;
                    dblElemVals[99, 1] = 252d;
                    dblElemVals[100, 1] = 257d;
                    dblElemVals[101, 1] = 258d;
                    dblElemVals[102, 1] = 269d;
                    dblElemVals[103, 1] = 260d;

                    // Unused elements
                    // data 104,Unq,Unnilquadium,261.11,.05, 105,Unp,Unnilpentium,262.114,005, 106,Unh,Unnilhexium,263.118,.005, 107,Uns,Unnilseptium,262.12,.05
                    break;

                default:
                    // Weight                           Uncertainty
                    // Average Element Weights
                    dblElemVals[1, 1] = 1.00794d;
                    dblElemVals[1, 2] = 0.00007d;
                    dblElemVals[2, 1] = 4.002602d;
                    dblElemVals[2, 2] = 0.000002d;
                    dblElemVals[3, 1] = 6.941d;
                    dblElemVals[3, 2] = 0.002d;
                    dblElemVals[4, 1] = 9.012182d;
                    dblElemVals[4, 2] = 0.000003d;
                    dblElemVals[5, 1] = 10.811d;
                    dblElemVals[5, 2] = 0.007d;
                    dblElemVals[6, 1] = 12.0107d;
                    dblElemVals[6, 2] = 0.0008d;
                    dblElemVals[7, 1] = 14.00674d;
                    dblElemVals[7, 2] = 0.00007d;
                    dblElemVals[8, 1] = 15.9994d;
                    dblElemVals[8, 2] = 0.0003d;
                    dblElemVals[9, 1] = 18.9984032d;
                    dblElemVals[9, 2] = 0.0000005d;
                    dblElemVals[10, 1] = 20.1797d;
                    dblElemVals[10, 2] = 0.0006d;
                    dblElemVals[11, 1] = 22.98977d;
                    dblElemVals[11, 2] = 0.000002d;
                    dblElemVals[12, 1] = 24.305d;
                    dblElemVals[12, 2] = 0.0006d;
                    dblElemVals[13, 1] = 26.981538d;
                    dblElemVals[13, 2] = 0.000002d;
                    dblElemVals[14, 1] = 28.0855d;
                    dblElemVals[14, 2] = 0.0003d;
                    dblElemVals[15, 1] = 30.973761d;
                    dblElemVals[15, 2] = 0.000002d;
                    dblElemVals[16, 1] = 32.066d;
                    dblElemVals[16, 2] = 0.006d;
                    dblElemVals[17, 1] = 35.4527d;
                    dblElemVals[17, 2] = 0.0009d;
                    dblElemVals[18, 1] = 39.948d;
                    dblElemVals[18, 2] = 0.001d;
                    dblElemVals[19, 1] = 39.0983d;
                    dblElemVals[19, 2] = 0.0001d;
                    dblElemVals[20, 1] = 40.078d;
                    dblElemVals[20, 2] = 0.004d;
                    dblElemVals[21, 1] = 44.95591d;
                    dblElemVals[21, 2] = 0.000008d;
                    dblElemVals[22, 1] = 47.867d;
                    dblElemVals[22, 2] = 0.001d;
                    dblElemVals[23, 1] = 50.9415d;
                    dblElemVals[23, 2] = 0.0001d;
                    dblElemVals[24, 1] = 51.9961d;
                    dblElemVals[24, 2] = 0.0006d;
                    dblElemVals[25, 1] = 54.938049d;
                    dblElemVals[25, 2] = 0.000009d;
                    dblElemVals[26, 1] = 55.845d;
                    dblElemVals[26, 2] = 0.002d;
                    dblElemVals[27, 1] = 58.9332d;
                    dblElemVals[27, 2] = 0.000009d;
                    dblElemVals[28, 1] = 58.6934d;
                    dblElemVals[28, 2] = 0.0002d;
                    dblElemVals[29, 1] = 63.546d;
                    dblElemVals[29, 2] = 0.003d;
                    dblElemVals[30, 1] = 65.39d;
                    dblElemVals[30, 2] = 0.02d;
                    dblElemVals[31, 1] = 69.723d;
                    dblElemVals[31, 2] = 0.001d;
                    dblElemVals[32, 1] = 72.61d;
                    dblElemVals[32, 2] = 0.02d;
                    dblElemVals[33, 1] = 74.9216d;
                    dblElemVals[33, 2] = 0.00002d;
                    dblElemVals[34, 1] = 78.96d;
                    dblElemVals[34, 2] = 0.03d;
                    dblElemVals[35, 1] = 79.904d;
                    dblElemVals[35, 2] = 0.001d;
                    dblElemVals[36, 1] = 83.8d;
                    dblElemVals[36, 2] = 0.01d;
                    dblElemVals[37, 1] = 85.4678d;
                    dblElemVals[37, 2] = 0.0003d;
                    dblElemVals[38, 1] = 87.62d;
                    dblElemVals[38, 2] = 0.01d;
                    dblElemVals[39, 1] = 88.90585d;
                    dblElemVals[39, 2] = 0.00002d;
                    dblElemVals[40, 1] = 91.224d;
                    dblElemVals[40, 2] = 0.002d;
                    dblElemVals[41, 1] = 92.90638d;
                    dblElemVals[41, 2] = 0.00002d;
                    dblElemVals[42, 1] = 95.94d;
                    dblElemVals[42, 2] = 0.01d;
                    dblElemVals[43, 1] = 97.9072d;
                    dblElemVals[43, 2] = 0.0005d;
                    dblElemVals[44, 1] = 101.07d;
                    dblElemVals[44, 2] = 0.02d;
                    dblElemVals[45, 1] = 102.9055d;
                    dblElemVals[45, 2] = 0.00002d;
                    dblElemVals[46, 1] = 106.42d;
                    dblElemVals[46, 2] = 0.01d;
                    dblElemVals[47, 1] = 107.8682d;
                    dblElemVals[47, 2] = 0.0002d;
                    dblElemVals[48, 1] = 112.411d;
                    dblElemVals[48, 2] = 0.008d;
                    dblElemVals[49, 1] = 114.818d;
                    dblElemVals[49, 2] = 0.003d;
                    dblElemVals[50, 1] = 118.71d;
                    dblElemVals[50, 2] = 0.007d;
                    dblElemVals[51, 1] = 121.76d;
                    dblElemVals[51, 2] = 0.001d;
                    dblElemVals[52, 1] = 127.6d;
                    dblElemVals[52, 2] = 0.03d;
                    dblElemVals[53, 1] = 126.90447d;
                    dblElemVals[53, 2] = 0.00003d;
                    dblElemVals[54, 1] = 131.29d;
                    dblElemVals[54, 2] = 0.02d;
                    dblElemVals[55, 1] = 132.90545d;
                    dblElemVals[55, 2] = 0.00002d;
                    dblElemVals[56, 1] = 137.327d;
                    dblElemVals[56, 2] = 0.007d;
                    dblElemVals[57, 1] = 138.9055d;
                    dblElemVals[57, 2] = 0.0002d;
                    dblElemVals[58, 1] = 140.116d;
                    dblElemVals[58, 2] = 0.001d;
                    dblElemVals[59, 1] = 140.90765d;
                    dblElemVals[59, 2] = 0.00002d;
                    dblElemVals[60, 1] = 144.24d;
                    dblElemVals[60, 2] = 0.03d;
                    dblElemVals[61, 1] = 144.9127d;
                    dblElemVals[61, 2] = 0.0005d;
                    dblElemVals[62, 1] = 150.36d;
                    dblElemVals[62, 2] = 0.03d;
                    dblElemVals[63, 1] = 151.964d;
                    dblElemVals[63, 2] = 0.001d;
                    dblElemVals[64, 1] = 157.25d;
                    dblElemVals[64, 2] = 0.03d;
                    dblElemVals[65, 1] = 158.92534d;
                    dblElemVals[65, 2] = 0.00002d;
                    dblElemVals[66, 1] = 162.5d;
                    dblElemVals[66, 2] = 0.03d;
                    dblElemVals[67, 1] = 164.93032d;
                    dblElemVals[67, 2] = 0.00002d;
                    dblElemVals[68, 1] = 167.26d;
                    dblElemVals[68, 2] = 0.03d;
                    dblElemVals[69, 1] = 168.93421d;
                    dblElemVals[69, 2] = 0.00002d;
                    dblElemVals[70, 1] = 173.04d;
                    dblElemVals[70, 2] = 0.03d;
                    dblElemVals[71, 1] = 174.967d;
                    dblElemVals[71, 2] = 0.001d;
                    dblElemVals[72, 1] = 178.49d;
                    dblElemVals[72, 2] = 0.02d;
                    dblElemVals[73, 1] = 180.9479d;
                    dblElemVals[73, 2] = 0.0001d;
                    dblElemVals[74, 1] = 183.84d;
                    dblElemVals[74, 2] = 0.01d;
                    dblElemVals[75, 1] = 186.207d;
                    dblElemVals[75, 2] = 0.001d;
                    dblElemVals[76, 1] = 190.23d;
                    dblElemVals[76, 2] = 0.03d;
                    dblElemVals[77, 1] = 192.217d;
                    dblElemVals[77, 2] = 0.03d;
                    dblElemVals[78, 1] = 195.078d;
                    dblElemVals[78, 2] = 0.002d;
                    dblElemVals[79, 1] = 196.96655d;
                    dblElemVals[79, 2] = 0.00002d;
                    dblElemVals[80, 1] = 200.59d;
                    dblElemVals[80, 2] = 0.02d;
                    dblElemVals[81, 1] = 204.3833d;
                    dblElemVals[81, 2] = 0.0002d;
                    dblElemVals[82, 1] = 207.2d;
                    dblElemVals[82, 2] = 0.1d;
                    dblElemVals[83, 1] = 208.98038d;
                    dblElemVals[83, 2] = 0.00002d;
                    dblElemVals[84, 1] = 208.9824d;
                    dblElemVals[84, 2] = 0.0005d;
                    dblElemVals[85, 1] = 209.9871d;
                    dblElemVals[85, 2] = 0.0005d;
                    dblElemVals[86, 1] = 222.0176d;
                    dblElemVals[86, 2] = 0.0005d;
                    dblElemVals[87, 1] = 223.0197d;
                    dblElemVals[87, 2] = 0.0005d;
                    dblElemVals[88, 1] = 226.0254d;
                    dblElemVals[88, 2] = 0.0001d;
                    dblElemVals[89, 1] = 227.0278d;
                    dblElemVals[89, 2] = 0.00001d;
                    dblElemVals[90, 1] = 232.0381d;
                    dblElemVals[90, 2] = 0.0001d;
                    dblElemVals[91, 1] = 231.03588d;
                    dblElemVals[91, 2] = 0.00002d;
                    dblElemVals[92, 1] = 238.0289d;
                    dblElemVals[92, 2] = 0.0001d;
                    dblElemVals[93, 1] = 237.0482d;
                    dblElemVals[93, 2] = 0.0005d;
                    dblElemVals[94, 1] = 244.0642d;
                    dblElemVals[94, 2] = 0.0005d;
                    dblElemVals[95, 1] = 243.0614d;
                    dblElemVals[95, 2] = 0.0005d;
                    dblElemVals[96, 1] = 247.0703d;
                    dblElemVals[96, 2] = 0.0005d;
                    dblElemVals[97, 1] = 247.0703d;
                    dblElemVals[97, 2] = 0.0005d;
                    dblElemVals[98, 1] = 251.0796d;
                    dblElemVals[98, 2] = 0.0005d;
                    dblElemVals[99, 1] = 252.083d;
                    dblElemVals[99, 2] = 0.005d;
                    dblElemVals[100, 1] = 257.0951d;
                    dblElemVals[100, 2] = 0.0005d;
                    dblElemVals[101, 1] = 258.1d;
                    dblElemVals[101, 2] = 0.05d;
                    dblElemVals[102, 1] = 259.1009d;
                    dblElemVals[102, 2] = 0.0005d;
                    dblElemVals[103, 1] = 262.11d;
                    dblElemVals[103, 2] = 0.05d;

                    // Unused elements
                    // data 104,Unq,Unnilquadium,261,1, 105,Unp,Unnilpentium,262,1, 106,Unh,Unnilhexium,263,1
                    break;
            }
        }


        /// <summary>
        /// Stores isotope information in elementStats[]
        /// </summary>
        internal static void MemoryLoadIsotopes(ref ElementAndMassTools.udtElementStatsType[] elementStats)
        {
            // The dblIsoMasses[] array holds the mass of each isotope
            // starting with dblIsoMasses[x,1], dblIsoMasses[x, 2], etc.
            var dblIsoMasses = new double[104, 12];

            // The sngIsoAbun[] array holds the isotopic abundances of each of the isotopes,
            // starting with sngIsoAbun[x,1] and corresponding to dblIsoMasses[]
            var sngIsoAbun = new float[104, 12];

            dblIsoMasses[1, 1] = 1.0078246d;
            sngIsoAbun[1, 1] = 0.99985f;
            dblIsoMasses[1, 2] = 2.014d;
            sngIsoAbun[1, 2] = 0.00015f;
            dblIsoMasses[2, 1] = 3.01603d;
            sngIsoAbun[2, 1] = 0.00000137f;
            dblIsoMasses[2, 2] = 4.0026029d;
            sngIsoAbun[2, 2] = 0.99999863f;
            dblIsoMasses[3, 1] = 6.01512d;
            sngIsoAbun[3, 1] = 0.0759f;
            dblIsoMasses[3, 2] = 7.016005d;
            sngIsoAbun[3, 2] = 0.9241f;
            dblIsoMasses[4, 1] = 9.012183d;
            sngIsoAbun[4, 1] = 1f;
            dblIsoMasses[5, 1] = 10.0129d;
            sngIsoAbun[5, 1] = 0.199f;
            dblIsoMasses[5, 2] = 11.009305d;
            sngIsoAbun[5, 2] = 0.801f;
            dblIsoMasses[6, 1] = 12d;
            sngIsoAbun[6, 1] = 0.9893f;
            dblIsoMasses[6, 2] = 13.00335d;
            sngIsoAbun[6, 2] = 0.0107f;
            dblIsoMasses[7, 1] = 14.003074d;
            sngIsoAbun[7, 1] = 0.99632f;
            dblIsoMasses[7, 2] = 15.00011d;
            sngIsoAbun[7, 2] = 0.00368f;
            dblIsoMasses[8, 1] = 15.994915d;
            sngIsoAbun[8, 1] = 0.99757f;
            dblIsoMasses[8, 2] = 16.999131d;
            sngIsoAbun[8, 2] = 0.00038f;
            dblIsoMasses[8, 3] = 17.99916d;
            sngIsoAbun[8, 3] = 0.00205f;
            dblIsoMasses[9, 1] = 18.9984032d;
            sngIsoAbun[9, 1] = 1f;
            dblIsoMasses[10, 1] = 19.992439d;
            sngIsoAbun[10, 1] = 0.9048f;
            dblIsoMasses[10, 2] = 20.99395d;
            sngIsoAbun[10, 2] = 0.0027f;
            dblIsoMasses[10, 3] = 21.99138d;
            sngIsoAbun[10, 3] = 0.0925f;
            dblIsoMasses[11, 1] = 22.98977d;
            sngIsoAbun[11, 1] = 1f;
            dblIsoMasses[12, 1] = 23.98505d;
            sngIsoAbun[12, 1] = 0.7899f;
            dblIsoMasses[12, 2] = 24.98584d;
            sngIsoAbun[12, 2] = 0.1f;
            dblIsoMasses[12, 3] = 25.98259d;
            sngIsoAbun[12, 3] = 0.1101f;
            dblIsoMasses[13, 1] = 26.981541d;
            sngIsoAbun[13, 1] = 1f;
            dblIsoMasses[14, 1] = 27.976928d;
            sngIsoAbun[14, 1] = 0.922297f;
            dblIsoMasses[14, 2] = 28.97649d;
            sngIsoAbun[14, 2] = 0.046832f;
            dblIsoMasses[14, 3] = 29.97376d;
            sngIsoAbun[14, 3] = 0.030871f;
            dblIsoMasses[15, 1] = 30.973763d;
            sngIsoAbun[15, 1] = 1f;
            dblIsoMasses[16, 1] = 31.972072d;
            sngIsoAbun[16, 1] = 0.9493f;
            dblIsoMasses[16, 2] = 32.97146d;
            sngIsoAbun[16, 2] = 0.0076f;
            dblIsoMasses[16, 3] = 33.96786d;
            sngIsoAbun[16, 3] = 0.0429f;
            dblIsoMasses[16, 4] = 35.96709d;
            sngIsoAbun[16, 4] = 0.0002f;
            dblIsoMasses[17, 1] = 34.968853d;
            sngIsoAbun[17, 1] = 0.7578f;
            dblIsoMasses[17, 2] = 36.99999d;
            sngIsoAbun[17, 2] = 0.2422f;
            dblIsoMasses[18, 1] = 35.96755d;
            sngIsoAbun[18, 1] = 0.003365f;
            dblIsoMasses[18, 2] = 37.96272d;
            sngIsoAbun[18, 2] = 0.000632f;
            dblIsoMasses[18, 3] = 39.96999d;
            sngIsoAbun[18, 3] = 0.996003f; // Note: Alternate mass is 39.962383
            dblIsoMasses[19, 1] = 38.963708d;
            sngIsoAbun[19, 1] = 0.932581f;
            dblIsoMasses[19, 2] = 39.963999d;
            sngIsoAbun[19, 2] = 0.000117f;
            dblIsoMasses[19, 3] = 40.961825d;
            sngIsoAbun[19, 3] = 0.067302f;
            dblIsoMasses[20, 1] = 39.962591d;
            sngIsoAbun[20, 1] = 0.96941f;
            dblIsoMasses[20, 2] = 41.958618d;
            sngIsoAbun[20, 2] = 0.00647f;
            dblIsoMasses[20, 3] = 42.958766d;
            sngIsoAbun[20, 3] = 0.00135f;
            dblIsoMasses[20, 4] = 43.95548d;
            sngIsoAbun[20, 4] = 0.02086f;
            dblIsoMasses[20, 5] = 45.953689d;
            sngIsoAbun[20, 5] = 0.00004f;
            dblIsoMasses[20, 6] = 47.952533d;
            sngIsoAbun[20, 6] = 0.00187f;
            dblIsoMasses[21, 1] = 44.959404d;
            sngIsoAbun[21, 1] = 1f; // Note: Alternate mass is 44.955914
            dblIsoMasses[22, 1] = 45.952629d;
            sngIsoAbun[22, 1] = 0.0825f;
            dblIsoMasses[22, 2] = 46.951764d;
            sngIsoAbun[22, 2] = 0.0744f;
            dblIsoMasses[22, 3] = 47.947947d;
            sngIsoAbun[22, 3] = 0.7372f;
            dblIsoMasses[22, 4] = 48.947871d;
            sngIsoAbun[22, 4] = 0.0541f;
            dblIsoMasses[22, 5] = 49.944792d;
            sngIsoAbun[22, 5] = 0.0518f;
            dblIsoMasses[23, 1] = 49.947161d;
            sngIsoAbun[23, 1] = 0.0025f;
            dblIsoMasses[23, 2] = 50.943963d;
            sngIsoAbun[23, 2] = 0.9975f;
            dblIsoMasses[24, 1] = 49.946046d;
            sngIsoAbun[24, 1] = 0.04345f;
            dblIsoMasses[24, 2] = 51.940509d;
            sngIsoAbun[24, 2] = 0.83789f;
            dblIsoMasses[24, 3] = 52.940651d;
            sngIsoAbun[24, 3] = 0.09501f;
            dblIsoMasses[24, 4] = 53.938882d;
            sngIsoAbun[24, 4] = 0.02365f;
            dblIsoMasses[25, 1] = 54.938046d;
            sngIsoAbun[25, 1] = 1f;
            dblIsoMasses[26, 1] = 53.939612d;
            sngIsoAbun[26, 1] = 0.05845f;
            dblIsoMasses[26, 2] = 55.934939d;
            sngIsoAbun[26, 2] = 0.91754f;
            dblIsoMasses[26, 3] = 56.935396d;
            sngIsoAbun[26, 3] = 0.02119f;
            dblIsoMasses[26, 4] = 57.933277d;
            sngIsoAbun[26, 4] = 0.00282f;
            dblIsoMasses[27, 1] = 58.933198d;
            sngIsoAbun[27, 1] = 1f;
            dblIsoMasses[28, 1] = 57.935347d;
            sngIsoAbun[28, 1] = 0.680769f;
            dblIsoMasses[28, 2] = 59.930788d;
            sngIsoAbun[28, 2] = 0.262231f;
            dblIsoMasses[28, 3] = 60.931058d;
            sngIsoAbun[28, 3] = 0.011399f;
            dblIsoMasses[28, 4] = 61.928346d;
            sngIsoAbun[28, 4] = 0.036345f;
            dblIsoMasses[28, 5] = 63.927968d;
            sngIsoAbun[28, 5] = 0.009256f;
            dblIsoMasses[29, 1] = 62.939598d;
            sngIsoAbun[29, 1] = 0.6917f; // Note: Alternate mass is 62.929599
            dblIsoMasses[29, 2] = 64.927793d;
            sngIsoAbun[29, 2] = 0.3083f;
            dblIsoMasses[30, 1] = 63.929145d;
            sngIsoAbun[30, 1] = 0.4863f;
            dblIsoMasses[30, 2] = 65.926034d;
            sngIsoAbun[30, 2] = 0.279f;
            dblIsoMasses[30, 3] = 66.927129d;
            sngIsoAbun[30, 3] = 0.041f;
            dblIsoMasses[30, 4] = 67.924846d;
            sngIsoAbun[30, 4] = 0.1875f;
            dblIsoMasses[30, 5] = 69.925325d;
            sngIsoAbun[30, 5] = 0.0062f;
            dblIsoMasses[31, 1] = 68.925581d;
            sngIsoAbun[31, 1] = 0.60108f;
            dblIsoMasses[31, 2] = 70.9247d;
            sngIsoAbun[31, 2] = 0.39892f;
            dblIsoMasses[32, 1] = 69.92425d;
            sngIsoAbun[32, 1] = 0.2084f;
            dblIsoMasses[32, 2] = 71.922079d;
            sngIsoAbun[32, 2] = 0.2754f;
            dblIsoMasses[32, 3] = 72.923463d;
            sngIsoAbun[32, 3] = 0.0773f;
            dblIsoMasses[32, 4] = 73.921177d;
            sngIsoAbun[32, 4] = 0.3628f;
            dblIsoMasses[32, 5] = 75.921401d;
            sngIsoAbun[32, 5] = 0.0761f;
            dblIsoMasses[33, 1] = 74.921596d;
            sngIsoAbun[33, 1] = 1f;
            dblIsoMasses[34, 1] = 73.922475d;
            sngIsoAbun[34, 1] = 0.0089f;
            dblIsoMasses[34, 2] = 75.919212d;
            sngIsoAbun[34, 2] = 0.0937f;
            dblIsoMasses[34, 3] = 76.919912d;
            sngIsoAbun[34, 3] = 0.0763f;
            dblIsoMasses[34, 4] = 77.919d;
            sngIsoAbun[34, 4] = 0.2377f;
            dblIsoMasses[34, 5] = 79.916521d;
            sngIsoAbun[34, 5] = 0.4961f;
            dblIsoMasses[34, 6] = 81.916698d;
            sngIsoAbun[34, 6] = 0.0873f;
            dblIsoMasses[35, 1] = 78.918336d;
            sngIsoAbun[35, 1] = 0.5069f;
            dblIsoMasses[35, 2] = 80.916289d;
            sngIsoAbun[35, 2] = 0.4931f;
            dblIsoMasses[36, 1] = 77.92d;
            sngIsoAbun[36, 1] = 0.0035f;
            dblIsoMasses[36, 2] = 79.91638d;
            sngIsoAbun[36, 2] = 0.0228f;
            dblIsoMasses[36, 3] = 81.913482d;
            sngIsoAbun[36, 3] = 0.1158f;
            dblIsoMasses[36, 4] = 82.914135d;
            sngIsoAbun[36, 4] = 0.1149f;
            dblIsoMasses[36, 5] = 83.911506d;
            sngIsoAbun[36, 5] = 0.57f;
            dblIsoMasses[36, 6] = 85.910616d;
            sngIsoAbun[36, 6] = 0.173f;
            dblIsoMasses[37, 1] = 84.911794d;
            sngIsoAbun[37, 1] = 0.7217f;
            dblIsoMasses[37, 2] = 86.909187d;
            sngIsoAbun[37, 2] = 0.2783f;
            dblIsoMasses[38, 1] = 83.91343d;
            sngIsoAbun[38, 1] = 0.0056f;
            dblIsoMasses[38, 2] = 85.909267d;
            sngIsoAbun[38, 2] = 0.0986f;
            dblIsoMasses[38, 3] = 86.908884d;
            sngIsoAbun[38, 3] = 0.07f;
            dblIsoMasses[38, 4] = 87.905625d;
            sngIsoAbun[38, 4] = 0.8258f;
            dblIsoMasses[39, 1] = 88.905856d;
            sngIsoAbun[39, 1] = 1f;
            dblIsoMasses[40, 1] = 89.904708d;
            sngIsoAbun[40, 1] = 0.5145f;
            dblIsoMasses[40, 2] = 90.905644d;
            sngIsoAbun[40, 2] = 0.1122f;
            dblIsoMasses[40, 3] = 91.905039d;
            sngIsoAbun[40, 3] = 0.1715f;
            dblIsoMasses[40, 4] = 93.906314d;
            sngIsoAbun[40, 4] = 0.1738f;
            dblIsoMasses[40, 5] = 95.908275d;
            sngIsoAbun[40, 5] = 0.028f;
            dblIsoMasses[41, 1] = 92.906378d;
            sngIsoAbun[41, 1] = 1f;
            dblIsoMasses[42, 1] = 91.906808d;
            sngIsoAbun[42, 1] = 0.1484f;
            dblIsoMasses[42, 2] = 93.905085d;
            sngIsoAbun[42, 2] = 0.0925f;
            dblIsoMasses[42, 3] = 94.90584d;
            sngIsoAbun[42, 3] = 0.1592f;
            dblIsoMasses[42, 4] = 95.904678d;
            sngIsoAbun[42, 4] = 0.1668f;
            dblIsoMasses[42, 5] = 96.90602d;
            sngIsoAbun[42, 5] = 0.0955f;
            dblIsoMasses[42, 6] = 97.905405d;
            sngIsoAbun[42, 6] = 0.2413f;
            dblIsoMasses[42, 7] = 99.907477d;
            sngIsoAbun[42, 7] = 0.0963f;
            dblIsoMasses[43, 1] = 97.9072d;
            sngIsoAbun[43, 1] = 1f;
            dblIsoMasses[44, 1] = 95.907599d;
            sngIsoAbun[44, 1] = 0.0554f;
            dblIsoMasses[44, 2] = 97.905287d;
            sngIsoAbun[44, 2] = 0.0187f;
            dblIsoMasses[44, 3] = 98.905939d;
            sngIsoAbun[44, 3] = 0.1276f;
            dblIsoMasses[44, 4] = 99.904219d;
            sngIsoAbun[44, 4] = 0.126f;
            dblIsoMasses[44, 5] = 100.905582d;
            sngIsoAbun[44, 5] = 0.1706f;
            dblIsoMasses[44, 6] = 101.904348d;
            sngIsoAbun[44, 6] = 0.3155f;
            dblIsoMasses[44, 7] = 103.905424d;
            sngIsoAbun[44, 7] = 0.1862f;
            dblIsoMasses[45, 1] = 102.905503d;
            sngIsoAbun[45, 1] = 1f;
            dblIsoMasses[46, 1] = 101.905634d;
            sngIsoAbun[46, 1] = 0.0102f;
            dblIsoMasses[46, 2] = 103.904029d;
            sngIsoAbun[46, 2] = 0.1114f;
            dblIsoMasses[46, 3] = 104.905079d;
            sngIsoAbun[46, 3] = 0.2233f;
            dblIsoMasses[46, 4] = 105.903475d;
            sngIsoAbun[46, 4] = 0.2733f;
            dblIsoMasses[46, 5] = 107.903895d;
            sngIsoAbun[46, 5] = 0.2646f;
            dblIsoMasses[46, 6] = 109.905167d;
            sngIsoAbun[46, 6] = 0.1172f;
            dblIsoMasses[47, 1] = 106.905095d;
            sngIsoAbun[47, 1] = 0.51839f;
            dblIsoMasses[47, 2] = 108.904757d;
            sngIsoAbun[47, 2] = 0.48161f;
            dblIsoMasses[48, 1] = 105.906461d;
            sngIsoAbun[48, 1] = 0.0125f;
            dblIsoMasses[48, 2] = 107.904176d;
            sngIsoAbun[48, 2] = 0.0089f;
            dblIsoMasses[48, 3] = 109.903005d;
            sngIsoAbun[48, 3] = 0.1249f;
            dblIsoMasses[48, 4] = 110.904182d;
            sngIsoAbun[48, 4] = 0.128f;
            dblIsoMasses[48, 5] = 111.902758d;
            sngIsoAbun[48, 5] = 0.2413f;
            dblIsoMasses[48, 6] = 112.9044d;
            sngIsoAbun[48, 6] = 0.1222f;
            dblIsoMasses[48, 7] = 113.903361d;
            sngIsoAbun[48, 7] = 0.2873f;
            dblIsoMasses[48, 8] = 115.904754d;
            sngIsoAbun[48, 8] = 0.0749f;
            dblIsoMasses[49, 1] = 112.904061d;
            sngIsoAbun[49, 1] = 0.0429f;
            dblIsoMasses[49, 2] = 114.903875d;
            sngIsoAbun[49, 2] = 0.9571f;
            dblIsoMasses[50, 1] = 111.904826d;
            sngIsoAbun[50, 1] = 0.0097f;
            dblIsoMasses[50, 2] = 113.902784d;
            sngIsoAbun[50, 2] = 0.0066f;
            dblIsoMasses[50, 3] = 114.903348d;
            sngIsoAbun[50, 3] = 0.0034f;
            dblIsoMasses[50, 4] = 115.901747d;
            sngIsoAbun[50, 4] = 0.1454f;
            dblIsoMasses[50, 5] = 116.902956d;
            sngIsoAbun[50, 5] = 0.0768f;
            dblIsoMasses[50, 6] = 117.901609d;
            sngIsoAbun[50, 6] = 0.2422f;
            dblIsoMasses[50, 7] = 118.90331d;
            sngIsoAbun[50, 7] = 0.0859f;
            dblIsoMasses[50, 8] = 119.902199d;
            sngIsoAbun[50, 8] = 0.3258f;
            dblIsoMasses[50, 9] = 121.90344d;
            sngIsoAbun[50, 9] = 0.0463f;
            dblIsoMasses[50, 10] = 123.905274d;
            sngIsoAbun[50, 10] = 0.0579f;
            dblIsoMasses[51, 1] = 120.903824d;
            sngIsoAbun[51, 1] = 0.5721f;
            dblIsoMasses[51, 2] = 122.904216d;
            sngIsoAbun[51, 2] = 0.4279f;
            dblIsoMasses[52, 1] = 119.904048d;
            sngIsoAbun[52, 1] = 0.0009f;
            dblIsoMasses[52, 2] = 121.903054d;
            sngIsoAbun[52, 2] = 0.0255f;
            dblIsoMasses[52, 3] = 122.904271d;
            sngIsoAbun[52, 3] = 0.0089f;
            dblIsoMasses[52, 4] = 123.902823d;
            sngIsoAbun[52, 4] = 0.0474f;
            dblIsoMasses[52, 5] = 124.904433d;
            sngIsoAbun[52, 5] = 0.0707f;
            dblIsoMasses[52, 6] = 125.903314d;
            sngIsoAbun[52, 6] = 0.1884f;
            dblIsoMasses[52, 7] = 127.904463d;
            sngIsoAbun[52, 7] = 0.3174f;
            dblIsoMasses[52, 8] = 129.906229d;
            sngIsoAbun[52, 8] = 0.3408f;
            dblIsoMasses[53, 1] = 126.904477d;
            sngIsoAbun[53, 1] = 1f;
            dblIsoMasses[54, 1] = 123.905894d;
            sngIsoAbun[54, 1] = 0.0009f;
            dblIsoMasses[54, 2] = 125.904281d;
            sngIsoAbun[54, 2] = 0.0009f;
            dblIsoMasses[54, 3] = 127.903531d;
            sngIsoAbun[54, 3] = 0.0192f;
            dblIsoMasses[54, 4] = 128.90478d;
            sngIsoAbun[54, 4] = 0.2644f;
            dblIsoMasses[54, 5] = 129.903509d;
            sngIsoAbun[54, 5] = 0.0408f;
            dblIsoMasses[54, 6] = 130.905072d;
            sngIsoAbun[54, 6] = 0.2118f;
            dblIsoMasses[54, 7] = 131.904148d;
            sngIsoAbun[54, 7] = 0.2689f;
            dblIsoMasses[54, 8] = 133.905395d;
            sngIsoAbun[54, 8] = 0.1044f;
            dblIsoMasses[54, 9] = 135.907214d;
            sngIsoAbun[54, 9] = 0.0887f;
            dblIsoMasses[55, 1] = 132.905433d;
            sngIsoAbun[55, 1] = 1f;
            dblIsoMasses[56, 1] = 129.906282d;
            sngIsoAbun[56, 1] = 0.00106f;
            dblIsoMasses[56, 2] = 131.905042d;
            sngIsoAbun[56, 2] = 0.00101f;
            dblIsoMasses[56, 3] = 133.904486d;
            sngIsoAbun[56, 3] = 0.02417f;
            dblIsoMasses[56, 4] = 134.905665d;
            sngIsoAbun[56, 4] = 0.06592f;
            dblIsoMasses[56, 5] = 135.904553d;
            sngIsoAbun[56, 5] = 0.07854f;
            dblIsoMasses[56, 6] = 136.905812d;
            sngIsoAbun[56, 6] = 0.11232f;
            dblIsoMasses[56, 7] = 137.905236d;
            sngIsoAbun[56, 7] = 0.71698f;
            dblIsoMasses[57, 1] = 137.907105d;
            sngIsoAbun[57, 1] = 0.0009f;
            dblIsoMasses[57, 2] = 138.906355d;
            sngIsoAbun[57, 2] = 0.9991f;
            dblIsoMasses[58, 1] = 135.90714d;
            sngIsoAbun[58, 1] = 0.00185f;
            dblIsoMasses[58, 2] = 137.905985d;
            sngIsoAbun[58, 2] = 0.00251f;
            dblIsoMasses[58, 3] = 139.905442d;
            sngIsoAbun[58, 3] = 0.8845f;
            dblIsoMasses[58, 4] = 141.909241d;
            sngIsoAbun[58, 4] = 0.11114f;
            dblIsoMasses[59, 1] = 140.907657d;
            sngIsoAbun[59, 1] = 1f;
            dblIsoMasses[60, 1] = 141.907731d;
            sngIsoAbun[60, 1] = 0.272f;
            dblIsoMasses[60, 2] = 142.90981d;
            sngIsoAbun[60, 2] = 0.122f;
            dblIsoMasses[60, 3] = 143.910083d;
            sngIsoAbun[60, 3] = 0.238f;
            dblIsoMasses[60, 4] = 144.91257d;
            sngIsoAbun[60, 4] = 0.083f;
            dblIsoMasses[60, 5] = 145.913113d;
            sngIsoAbun[60, 5] = 0.172f;
            dblIsoMasses[60, 6] = 147.916889d;
            sngIsoAbun[60, 6] = 0.057f;
            dblIsoMasses[60, 7] = 149.920887d;
            sngIsoAbun[60, 7] = 0.056f;
            dblIsoMasses[61, 1] = 144.9127d;
            sngIsoAbun[61, 1] = 1f;
            dblIsoMasses[62, 1] = 143.911998d;
            sngIsoAbun[62, 1] = 0.0307f;
            dblIsoMasses[62, 2] = 146.914895d;
            sngIsoAbun[62, 2] = 0.1499f;
            dblIsoMasses[62, 3] = 147.91482d;
            sngIsoAbun[62, 3] = 0.1124f;
            dblIsoMasses[62, 4] = 148.917181d;
            sngIsoAbun[62, 4] = 0.1382f;
            dblIsoMasses[62, 5] = 149.917273d;
            sngIsoAbun[62, 5] = 0.0738f;
            dblIsoMasses[62, 6] = 151.919741d;
            sngIsoAbun[62, 6] = 0.2675f;
            dblIsoMasses[62, 7] = 153.922206d;
            sngIsoAbun[62, 7] = 0.2275f;
            dblIsoMasses[63, 1] = 150.919847d;
            sngIsoAbun[63, 1] = 0.4781f;
            dblIsoMasses[63, 2] = 152.921243d;
            sngIsoAbun[63, 2] = 0.5219f;
            dblIsoMasses[64, 1] = 151.919786d;
            sngIsoAbun[64, 1] = 0.002f;
            dblIsoMasses[64, 2] = 153.920861d;
            sngIsoAbun[64, 2] = 0.0218f;
            dblIsoMasses[64, 3] = 154.922618d;
            sngIsoAbun[64, 3] = 0.148f;
            dblIsoMasses[64, 4] = 155.922118d;
            sngIsoAbun[64, 4] = 0.2047f;
            dblIsoMasses[64, 5] = 156.923956d;
            sngIsoAbun[64, 5] = 0.1565f;
            dblIsoMasses[64, 6] = 157.924111d;
            sngIsoAbun[64, 6] = 0.2484f;
            dblIsoMasses[64, 7] = 159.927049d;
            sngIsoAbun[64, 7] = 0.2186f;
            dblIsoMasses[65, 1] = 158.92535d;
            sngIsoAbun[65, 1] = 1f;
            dblIsoMasses[66, 1] = 155.925277d;
            sngIsoAbun[66, 1] = 0.0006f;
            dblIsoMasses[66, 2] = 157.924403d;
            sngIsoAbun[66, 2] = 0.001f;
            dblIsoMasses[66, 3] = 159.925193d;
            sngIsoAbun[66, 3] = 0.0234f;
            dblIsoMasses[66, 4] = 160.92693d;
            sngIsoAbun[66, 4] = 0.1891f;
            dblIsoMasses[66, 5] = 161.926795d;
            sngIsoAbun[66, 5] = 0.2551f;
            dblIsoMasses[66, 6] = 162.928728d;
            sngIsoAbun[66, 6] = 0.249f;
            dblIsoMasses[66, 7] = 163.929183d;
            sngIsoAbun[66, 7] = 0.2818f;
            dblIsoMasses[67, 1] = 164.930332d;
            sngIsoAbun[67, 1] = 1f;
            dblIsoMasses[68, 1] = 161.928775d;
            sngIsoAbun[68, 1] = 0.0014f;
            dblIsoMasses[68, 2] = 163.929198d;
            sngIsoAbun[68, 2] = 0.0161f;
            dblIsoMasses[68, 3] = 165.930305d;
            sngIsoAbun[68, 3] = 0.3361f;
            dblIsoMasses[68, 4] = 166.932046d;
            sngIsoAbun[68, 4] = 0.2293f;
            dblIsoMasses[68, 5] = 167.932368d;
            sngIsoAbun[68, 5] = 0.2678f;
            dblIsoMasses[68, 6] = 169.935461d;
            sngIsoAbun[68, 6] = 0.1493f;
            dblIsoMasses[69, 1] = 168.934225d;
            sngIsoAbun[69, 1] = 1f;
            dblIsoMasses[70, 1] = 167.932873d;
            sngIsoAbun[70, 1] = 0.0013f;
            dblIsoMasses[70, 2] = 169.934759d;
            sngIsoAbun[70, 2] = 0.0304f;
            dblIsoMasses[70, 3] = 170.936323d;
            sngIsoAbun[70, 3] = 0.1428f;
            dblIsoMasses[70, 4] = 171.936387d;
            sngIsoAbun[70, 4] = 0.2183f;
            dblIsoMasses[70, 5] = 172.938208d;
            sngIsoAbun[70, 5] = 0.1613f;
            dblIsoMasses[70, 6] = 173.938873d;
            sngIsoAbun[70, 6] = 0.3183f;
            dblIsoMasses[70, 7] = 175.942564d;
            sngIsoAbun[70, 7] = 0.1276f;
            dblIsoMasses[71, 1] = 174.940785d;
            sngIsoAbun[71, 1] = 0.9741f;
            dblIsoMasses[71, 2] = 175.942679d;
            sngIsoAbun[71, 2] = 0.0259f;
            dblIsoMasses[72, 1] = 173.94004d;
            sngIsoAbun[72, 1] = 0.0016f;
            dblIsoMasses[72, 2] = 175.941406d;
            sngIsoAbun[72, 2] = 0.0526f;
            dblIsoMasses[72, 3] = 176.943217d;
            sngIsoAbun[72, 3] = 0.186f;
            dblIsoMasses[72, 4] = 177.943696d;
            sngIsoAbun[72, 4] = 0.2728f;
            dblIsoMasses[72, 5] = 178.945812d;
            sngIsoAbun[72, 5] = 0.1362f;
            dblIsoMasses[72, 6] = 179.946561d;
            sngIsoAbun[72, 6] = 0.3508f;
            dblIsoMasses[73, 1] = 179.947462d;
            sngIsoAbun[73, 1] = 0.00012f;
            dblIsoMasses[73, 2] = 180.948014d;
            sngIsoAbun[73, 2] = 0.99988f;
            dblIsoMasses[74, 1] = 179.946701d;
            sngIsoAbun[74, 1] = 0.0012f;
            dblIsoMasses[74, 2] = 181.948202d;
            sngIsoAbun[74, 2] = 0.265f;
            dblIsoMasses[74, 3] = 182.95022d;
            sngIsoAbun[74, 3] = 0.1431f;
            dblIsoMasses[74, 4] = 183.950953d;
            sngIsoAbun[74, 4] = 0.3064f;
            dblIsoMasses[74, 5] = 185.954357d;
            sngIsoAbun[74, 5] = 0.2843f;
            dblIsoMasses[75, 1] = 184.952951d;
            sngIsoAbun[75, 1] = 0.374f;
            dblIsoMasses[75, 2] = 186.955765d;
            sngIsoAbun[75, 2] = 0.626f;
            dblIsoMasses[76, 1] = 183.952488d;
            sngIsoAbun[76, 1] = 0.0002f;
            dblIsoMasses[76, 2] = 185.95383d;
            sngIsoAbun[76, 2] = 0.0159f;
            dblIsoMasses[76, 3] = 186.955741d;
            sngIsoAbun[76, 3] = 0.0196f;
            dblIsoMasses[76, 4] = 187.95586d;
            sngIsoAbun[76, 4] = 0.1324f;
            dblIsoMasses[76, 5] = 188.958137d;
            sngIsoAbun[76, 5] = 0.1615f;
            dblIsoMasses[76, 6] = 189.958436d;
            sngIsoAbun[76, 6] = 0.2626f;
            dblIsoMasses[76, 7] = 191.961467d;
            sngIsoAbun[76, 7] = 0.4078f; // Note: Alternate mass is 191.960603
            dblIsoMasses[77, 1] = 190.960584d;
            sngIsoAbun[77, 1] = 0.373f;
            dblIsoMasses[77, 2] = 192.962942d;
            sngIsoAbun[77, 2] = 0.627f;
            dblIsoMasses[78, 1] = 189.959917d;
            sngIsoAbun[78, 1] = 0.00014f;
            dblIsoMasses[78, 2] = 191.961019d;
            sngIsoAbun[78, 2] = 0.00782f;
            dblIsoMasses[78, 3] = 193.962655d;
            sngIsoAbun[78, 3] = 0.32967f;
            dblIsoMasses[78, 4] = 194.964785d;
            sngIsoAbun[78, 4] = 0.33832f;
            dblIsoMasses[78, 5] = 195.964926d;
            sngIsoAbun[78, 5] = 0.25242f;
            dblIsoMasses[78, 6] = 197.967869d;
            sngIsoAbun[78, 6] = 0.07163f;
            dblIsoMasses[79, 1] = 196.966543d;
            sngIsoAbun[79, 1] = 1f;
            dblIsoMasses[80, 1] = 195.965807d;
            sngIsoAbun[80, 1] = 0.0015f;
            dblIsoMasses[80, 2] = 197.966743d;
            sngIsoAbun[80, 2] = 0.0997f;
            dblIsoMasses[80, 3] = 198.968254d;
            sngIsoAbun[80, 3] = 0.1687f;
            dblIsoMasses[80, 4] = 199.9683d;
            sngIsoAbun[80, 4] = 0.231f;
            dblIsoMasses[80, 5] = 200.970277d;
            sngIsoAbun[80, 5] = 0.1318f;
            dblIsoMasses[80, 6] = 201.970632d;
            sngIsoAbun[80, 6] = 0.2986f;
            dblIsoMasses[80, 7] = 203.973467d;
            sngIsoAbun[80, 7] = 0.0687f;
            dblIsoMasses[81, 1] = 202.97232d;
            sngIsoAbun[81, 1] = 0.29524f;
            dblIsoMasses[81, 2] = 204.974401d;
            sngIsoAbun[81, 2] = 0.70476f;
            dblIsoMasses[82, 1] = 203.97302d;
            sngIsoAbun[82, 1] = 0.014f;
            dblIsoMasses[82, 2] = 205.97444d;
            sngIsoAbun[82, 2] = 0.241f;
            dblIsoMasses[82, 3] = 206.975872d;
            sngIsoAbun[82, 3] = 0.221f;
            dblIsoMasses[82, 4] = 207.976641d;
            sngIsoAbun[82, 4] = 0.524f;
            dblIsoMasses[83, 1] = 208.980388d;
            sngIsoAbun[83, 1] = 1f;
            dblIsoMasses[84, 1] = 209d;
            sngIsoAbun[84, 1] = 1f;
            dblIsoMasses[85, 1] = 210d;
            sngIsoAbun[85, 1] = 1f;
            dblIsoMasses[86, 1] = 222d;
            sngIsoAbun[86, 1] = 1f;
            dblIsoMasses[87, 1] = 223d;
            sngIsoAbun[87, 1] = 1f;
            dblIsoMasses[88, 1] = 226d;
            sngIsoAbun[88, 1] = 1f;
            dblIsoMasses[89, 1] = 227d;
            sngIsoAbun[89, 1] = 1f;
            dblIsoMasses[90, 1] = 232.038054d;
            sngIsoAbun[90, 1] = 1f;
            dblIsoMasses[91, 1] = 231d;
            sngIsoAbun[91, 1] = 1f;
            dblIsoMasses[92, 1] = 234.041637d;
            sngIsoAbun[92, 1] = 0.000055f;
            dblIsoMasses[92, 2] = 235.043924d;
            sngIsoAbun[92, 2] = 0.0072f;
            dblIsoMasses[92, 3] = 238.050786d;
            sngIsoAbun[92, 3] = 0.992745f;
            dblIsoMasses[93, 1] = 237d;
            sngIsoAbun[93, 1] = 1f;
            dblIsoMasses[94, 1] = 244d;
            sngIsoAbun[94, 1] = 1f;
            dblIsoMasses[95, 1] = 243d;
            sngIsoAbun[95, 1] = 1f;
            dblIsoMasses[96, 1] = 247d;
            sngIsoAbun[96, 1] = 1f;
            dblIsoMasses[97, 1] = 247d;
            sngIsoAbun[97, 1] = 1f;
            dblIsoMasses[98, 1] = 251d;
            sngIsoAbun[98, 1] = 1f;
            dblIsoMasses[99, 1] = 252d;
            sngIsoAbun[99, 1] = 1f;
            dblIsoMasses[100, 1] = 257d;
            sngIsoAbun[100, 1] = 1f;
            dblIsoMasses[101, 1] = 258d;
            sngIsoAbun[101, 1] = 1f;
            dblIsoMasses[102, 1] = 259d;
            sngIsoAbun[102, 1] = 1f;
            dblIsoMasses[103, 1] = 262d;
            sngIsoAbun[103, 1] = 1f;

            // Note: I chose to store the desired values in the dblIsoMasses[] and sngIsoAbun[] 2D arrays
            // then copy to the ElementStats[] array since this method actually decreases
            // the size of this subroutine
            for (var intElementIndex = 1; intElementIndex <= ElementAndMassTools.ELEMENT_COUNT - 1; intElementIndex++)
            {
                var stats = elementStats[intElementIndex];
                short intIsotopeIndex = 1;
                while (dblIsoMasses[intElementIndex, intIsotopeIndex] > 0d)
                {
                    stats.Isotopes[intIsotopeIndex].Abundance = sngIsoAbun[intElementIndex, intIsotopeIndex];
                    stats.Isotopes[intIsotopeIndex].Mass = dblIsoMasses[intElementIndex, intIsotopeIndex];
                    intIsotopeIndex = (short)(intIsotopeIndex + 1);
                    if (intIsotopeIndex > ElementAndMassTools.MAX_ISOTOPES)
                        break;
                }

                stats.IsotopeCount = (short)(intIsotopeIndex - 1);
            }
        }


        public static int MemoryLoadMessageStatementsEnglish(ref string[] MessageStatements)
        {
            const int statementCount = 1555;

            MessageStatements[1] = "Unknown element";
            MessageStatements[2] = "Obsolete msg: Cannot handle more than 4 layers of embedded parentheses";
            MessageStatements[3] = "Missing closing parentheses";
            MessageStatements[4] = "Unmatched parentheses";
            MessageStatements[5] = "Cannot have a 0 directly after an element or dash (-)";
            MessageStatements[6] = "Number too large or must only be after [, -, ), or caret (^)";
            MessageStatements[7] = "Number too large";
            MessageStatements[8] = "Obsolete msg: Cannot start formula with a number; use parentheses, brackets, or dash (-)";
            MessageStatements[9] = "Obsolete msg: Decimal numbers cannot be used after parentheses; use a [ or a caret (^)";
            MessageStatements[10] = "Obsolete msg: Decimal numbers less than 1 must be in the form .5 and not 0.5";
            MessageStatements[11] = "Numbers should follow left brackets, not right brackets (unless 'treat brackets' as parentheses is on)";
            MessageStatements[12] = "A number must be present after a bracket and/or after the decimal point";
            MessageStatements[13] = "Missing closing bracket, ]";
            MessageStatements[14] = "Misplaced number; should only be after an element, [, ), -, or caret (^)";
            MessageStatements[15] = "Unmatched bracket";
            MessageStatements[16] = "Cannot handle nested brackets or brackets inside multiple hydrates (unless 'treat brackets as parentheses' is on)";
            MessageStatements[17] = "Obsolete msg: Cannot handle multiple hydrates (extras) in brackets";
            MessageStatements[18] = "Unknown element ";
            MessageStatements[19] = "Obsolete msg: Cannot start formula with a dash (-)";
            MessageStatements[20] = "There must be an isotopic mass number following the caret (^)";
            MessageStatements[21] = "Obsolete msg: Zero after caret (^); an isotopic mass of zero is not allowed";
            MessageStatements[22] = "An element must be present after the isotopic mass after the caret (^)";
            MessageStatements[23] = "Negative isotopic masses are not allowed after the caret (^)";
            MessageStatements[24] = "Isotopic masses are not allowed for abbreviations";
            MessageStatements[25] = "An element must be present after the leading coefficient of the dash";
            MessageStatements[26] = "Isotopic masses are not allowed for abbreviations; D is an abbreviation";
            MessageStatements[27] = "Numbers cannot contain more than one decimal point";
            MessageStatements[28] = "Circular abbreviation reference; can't have an abbreviation referencing a second abbreviation that depends upon the first one";
            MessageStatements[29] = "Obsolete msg: Cannot run percent solver until one or more lines are locked to a value.";
            MessageStatements[30] = "Invalid formula subtraction; one or more atoms (or too many atoms) in the right-hand formula are missing (or less abundant) in the left-hand formula";

            // Cases 50 through 74 are used during the % Solver routine
            MessageStatements[50] = "Target value is greater than 100%, an impossible value.";

            // Cases 75 through 99 are used in frmCalculator
            MessageStatements[75] = "Letters are not allowed in the calculator line";
            MessageStatements[76] = "Missing closing parenthesis";
            MessageStatements[77] = "Unmatched parentheses";
            MessageStatements[78] = "Misplaced number; or number too large, too small, or too long";
            MessageStatements[79] = "Obsolete msg: Misplaced parentheses";
            MessageStatements[80] = "Misplaced operator";
            MessageStatements[81] = "Track variable is less than or equal to 1; program bug; please notify programmer";
            MessageStatements[82] = "Missing operator. Note: ( is not needed OR allowed after a + or -";
            MessageStatements[83] = "Obsolete msg: Brackets not allowed in calculator; simply use nested parentheses";
            MessageStatements[84] = "Obsolete msg: Decimal numbers less than 1 must be in the form .5 and not 0.5";
            MessageStatements[85] = "Cannot take negative numbers to a decimal power";
            MessageStatements[86] = "Cannot take zero to a negative power";
            MessageStatements[87] = "Cannot take zero to the zeroth power";
            MessageStatements[88] = "Obsolete msg: Only a single positive or negative number is allowed after a caret (^)";
            MessageStatements[89] = "A single positive or negative number must be present after a caret (^)";
            MessageStatements[90] = "Numbers cannot contain more than one decimal point";
            MessageStatements[91] = "You tried to divide a number by zero.  Please correct the problem and recalculate.";
            MessageStatements[92] = "Spaces are not allowed in mathematical expressions";

            // Note that tags 93 and 94 are also used on frmMain
            MessageStatements[93] = "Use a period for a decimal point";
            MessageStatements[94] = "Use a comma for a decimal point";
            MessageStatements[95] = "A number must be present after a decimal point";

            // Cases 100 and up are shown when loading data from files and starting application
            MessageStatements[100] = "Error Saving Abbreviation File";
            MessageStatements[110] = "The default abbreviation file has been re-created.";
            MessageStatements[115] = "The old file has been renamed";
            MessageStatements[120] = "[AMINO ACIDS] heading not found in MWT_ABBR.DAT file.  This heading must be located before/above the [ABBREVIATIONS] heading.";
            MessageStatements[125] = "Obsolete msg: Select OK to continue without any abbreviations.";
            MessageStatements[130] = "[ABBREVIATIONS] heading not found in MWT_ABBR.DAT file.  This heading must be located before/above the [AMINO ACIDS] heading.";
            MessageStatements[135] = "Select OK to continue with amino acids abbreviations only.";
            MessageStatements[140] = "The Abbreviations File was not found in the program directory";
            MessageStatements[150] = "Error Loading/Creating Abbreviation File";
            MessageStatements[160] = "Ignoring Abbreviation -- Invalid Formula";
            MessageStatements[170] = "Ignoring Duplicate Abbreviation";
            MessageStatements[180] = "Ignoring Abbreviation; Invalid Character";
            MessageStatements[190] = "Ignoring Abbreviation; too long";
            MessageStatements[192] = "Ignoring Abbreviation; symbol length cannot be 0";
            MessageStatements[194] = "Ignoring Abbreviation; symbol most only contain letters";
            MessageStatements[196] = "Ignoring Abbreviation; Too many abbreviations in memory";
            MessageStatements[200] = "Ignoring Invalid Line";
            MessageStatements[210] = "The default elements file has been re-created.";
            MessageStatements[220] = "Possibly incorrect weight for element";
            MessageStatements[230] = "Possibly incorrect uncertainty for element";
            MessageStatements[250] = "Ignoring Line; Invalid Element Symbol";
            MessageStatements[260] = "[ELEMENTS] heading not found in MWT_ELEM.DAT file.  This heading must be located in the file.";
            MessageStatements[265] = "Select OK to continue with default Element values.";
            MessageStatements[270] = "The Elements File was not found in the program directory";
            MessageStatements[280] = "Error Loading/Creating Elements File";
            MessageStatements[305] = "Continuing with default captions.";
            MessageStatements[320] = "Error Saving Elements File";
            MessageStatements[330] = "Error Loading/Creating Values File";
            MessageStatements[340] = "Select OK to continue without loading default Values and Formulas.";
            MessageStatements[345] = "If using a Read-Only drive, use the /X switch at the command line to prevent this error.";
            MessageStatements[350] = "Error";
            MessageStatements[360] = "Error Saving Default Options File";
            MessageStatements[370] = "Obsolete msg: If using a Read-Only drive, you cannot save the default options.";
            MessageStatements[380] = "Error Saving Values and Formulas File";
            MessageStatements[390] = "Obsolete msg: If using a Read-Only drive, you cannot save the values and formulas.";
            MessageStatements[400] = "Error Loading/Creating Default Options File";
            MessageStatements[410] = "Select OK to continue without loading User Defaults.";
            MessageStatements[420] = "Obsolete msg: The Default Options file was corrupted; it will be re-created.";
            MessageStatements[430] = "Obsolete msg: The Values and Formulas file was corrupted; it will be re-created.";
            MessageStatements[440] = "The language file could not be successfully opened or was formatted incorrectly.";
            MessageStatements[450] = "Unable to load language-specific captions";
            MessageStatements[460] = "The language file could not be found in the program directory";
            MessageStatements[470] = "The file requested for molecular weight processing was not found";
            MessageStatements[480] = "File Not Found";
            MessageStatements[490] = "This file already exists.  Replace it?";
            MessageStatements[500] = "File Exists";
            MessageStatements[510] = "Error Reading/Writing files for batch processing";
            MessageStatements[515] = "Select OK to abort batch file processing.";
            MessageStatements[520] = "Error in program";
            MessageStatements[530] = "These lines of code should not have been encountered.  Please notify programmer.";
            MessageStatements[540] = "Obsolete msg: You can't edit elements because the /X switch was used at the command line.";
            MessageStatements[545] = "Obsolete msg: You can't edit abbreviations because the /X switch was used at the command line.";
            MessageStatements[550] = "Percent solver cannot be used when brackets are being treated as parentheses.  You can change the bracket recognition mode by choosing Change Program Preferences under the Options menu.";
            MessageStatements[555] = "Percent Solver not Available";
            MessageStatements[560] = "Maximum number of formula fields exist.";
            MessageStatements[570] = "Current formula is blank.";
            MessageStatements[580] = "Turn off Percent Solver (F11) before creating a new formula.";
            MessageStatements[590] = "An overflow error has occured.  Please reduce number sizes and recalculate.";
            MessageStatements[600] = "An error has occured";
            MessageStatements[605] = "Please exit the program and report the error to the programmer.  Select About from the Help menu to see the E-mail address.";
            MessageStatements[610] = "Spaces are not allowed in formulas";
            MessageStatements[620] = "Invalid Character";
            MessageStatements[630] = "Cannot copy to new formula.";
            MessageStatements[645] = "Obsolete msg: Maximum number of formulas is 7";
            MessageStatements[650] = "Current formula is blank.";
            MessageStatements[655] = "Percent Solver mode is on (F11 to exit mode).";
            MessageStatements[660] = "Warning, isotopic mass is probably too large for element";
            MessageStatements[662] = "Warning, isotopic mass is probably too small for element";
            MessageStatements[665] = "vs avg atomic wt of";
            MessageStatements[670] = "Warning, isotopic mass is impossibly small for element";
            MessageStatements[675] = "protons";
            MessageStatements[680] = "Note: Exact Mode is on";
            MessageStatements[685] = "Note: for % Solver, a left bracket must precede an x";
            MessageStatements[690] = "Note: brackets are being treated as parentheses";
            MessageStatements[700] = "One or more elements must be checked.";
            MessageStatements[705] = "Maximum hits must be greater than 0.";
            MessageStatements[710] = "Maximum hits must be less than ";
            MessageStatements[715] = "Minimum number of elements must be 0 or greater.";
            MessageStatements[720] = "Minimum number of elements must be less than maximum number of elements.";
            MessageStatements[725] = "Maximum number of elements must be less than 65,025";
            MessageStatements[730] = "An atomic weight must be entered for custom elements.";
            MessageStatements[735] = "Atomic Weight must be greater than 0 for custom elements.";
            MessageStatements[740] = "Target molecular weight must be entered.";
            MessageStatements[745] = "Target molecular weight must be greater than 0.";
            MessageStatements[750] = "Obsolete msg: Weight tolerance must be 0 or greater.";
            MessageStatements[755] = "A maximum molecular weight must be entered.";
            MessageStatements[760] = "Maximum molecular weight must be greater than 0.";
            MessageStatements[765] = "Target percentages must be entered for element";
            MessageStatements[770] = "Target percentage must be greater than 0.";
            MessageStatements[775] = "Custom elemental weights must contain only numbers or only letters.  If letters are used, they must be for a single valid elemental symbol or abbreviation.";
            MessageStatements[780] = "Custom elemental weight is empty.  If letters are used, they must be for a single valid elemental symbol or abbreviation.";
            MessageStatements[785] = "Unknown element or abbreviation for custom elemental weight";
            MessageStatements[790] = "Only single elemental symbols or abbreviations are allowed.";
            MessageStatements[800] = "Caution, no abbreviations were loaded -- Command has no effect.";
            MessageStatements[805] = "Cannot handle fractional numbers of atoms";
            MessageStatements[910] = "Ions are already present in the ion list.  Replace with new ions?";
            MessageStatements[920] = "Replace Existing Ions";
            MessageStatements[930] = "Loading Ion List";
            MessageStatements[940] = "Process aborted";
            MessageStatements[945] = " aborted";
            MessageStatements[950] = "Normalizing ions";
            MessageStatements[960] = "Normalizing by region";
            MessageStatements[965] = "Sorting by Intensity";
            MessageStatements[970] = "Matching Ions";
            MessageStatements[980] = "The clipboard is empty.  No ions to paste.";
            MessageStatements[985] = "No ions";
            MessageStatements[990] = "Pasting ion list";
            MessageStatements[1000] = "Determining number of ions in list";
            MessageStatements[1010] = "Parsing list";
            MessageStatements[1020] = "No valid ions were found on the clipboard.  A valid ion list is a list of mass and intensity pairs, separated by commas, tabs, or spaces.  One mass/intensity pair should be present per line.";

            MessageStatements[1030] = "Error writing data to file";
            MessageStatements[1040] = "Set Range";
            MessageStatements[1050] = "Start Val";
            MessageStatements[1055] = "End Val";
            MessageStatements[1060] = "Set X Axis Range";
            MessageStatements[1065] = "Set Y Axis Range";
            MessageStatements[1070] = "Enter a new Gaussian Representation quality factor.  Higher numbers result in smoother Gaussian curves, but slower updates.  Valid range is 1 to 50, default is 20.";
            MessageStatements[1072] = "Gaussian Representation Quality";
            MessageStatements[1075] = "Enter a new plotting approximation factor. Higher numbers result in faster updates, but give a less accurate graphical representation when viewing a wide mass range (zoomed out).  Valid range is 1 to 50, default is 10.";
            MessageStatements[1077] = "Plotting Approximation Factor";
            MessageStatements[1080] = "Resolving Power Specifications";
            MessageStatements[1090] = "Resolving Power";
            MessageStatements[1100] = "X Value of Specification";
            MessageStatements[1110] = "Please enter the approximate number of ticks to show on the axis";
            MessageStatements[1115] = "Axis Ticks";
            MessageStatements[1120] = "Creating Gaussian Representation";
            MessageStatements[1130] = "Preparing plot";
            MessageStatements[1135] = "Drawing plot";
            MessageStatements[1140] = "Are you sure you want to restore the default plotting options?";
            MessageStatements[1145] = "Restore Default Options";
            MessageStatements[1150] = "Auto Align Ions";
            MessageStatements[1155] = "Maximum Offset";
            MessageStatements[1160] = "Offset Increment";
            MessageStatements[1165] = "Aligning Ions";

            MessageStatements[1200] = "Caution symbol must be 1 to " + ElementAndMassTools.MAX_ABBREV_LENGTH + " characters long";
            MessageStatements[1205] = "Caution symbol most only contain letters";
            MessageStatements[1210] = "Caution description length cannot be 0";
            MessageStatements[1215] = "Too many caution statements.  Unable to add another one.";

            MessageStatements[1500] = "All Files";
            MessageStatements[1510] = "Text Files";
            MessageStatements[1515] = "txt";
            MessageStatements[1520] = "Data Files";
            MessageStatements[1525] = "csv";
            MessageStatements[1530] = "Sequence Files";
            MessageStatements[1535] = "seq";
            MessageStatements[1540] = "Ion List Files";
            MessageStatements[1545] = "txt";
            MessageStatements[1550] = "Capillary Flow Info Files";
            MessageStatements[1555] = "cap";

            return statementCount;
        }
    }
}
